(function () {
    "use strict";

    var CodeA = "11101011110";
    var CodeB = "10111101110";
    var CodeC = "10111011110";

    var CodeAValue = 101;
    var CodeBValue = 100;
    var CodeCValue = 99;

    var StartCodeA = "11010000100";
    var StartCodeB = "11010010000";
    var StartCodeC = "11010011100";

    var Stop = "1100011101011";

    var StartCodeAValue = 103;
    var StartCodeBValue = 104;
    var StartCodeCValue = 105;

    var MapEncodeAPattern = {
        ' ': '11011001100',
        '!': '11001101100',
        '"': '11001100110',
        '#': '10010011000',
        '$': '10010001100',
        '%': '10001001100',
        '&': '10011001000',
        '\'': '10011000100',
        '(': '10001100100',
        ')': '11001001000',
        '*': '11001000100',
        '+': '11000100100',
        ',': '10110011100',
        '-': '10011011100',
        '.': '10011001110',
        '/': '10111001100',
        '0': '10011101100',
        '1': '10011100110',
        '2': '11001110010',
        '3': '11001011100',
        '4': '11001001110',
        '5': '11011100100',
        '6': '11001110100',
        '7': '11101101110',
        '8': '11101001100',
        '9': '11100101100',
        ':': '11100100110',
        ';': '11101100100',
        '<': '11100110100',
        '=': '11100110010',
        '>': '11011011000',
        '?': '11011000110',
        '@': '11000110110',
        'A': '10100011000',
        'B': '10001011000',
        'C': '10001000110',
        'D': '10110001000',
        'E': '10001101000',
        'F': '10001100010',
        'G': '11010001000',
        'H': '11000101000',
        'I': '11000100010',
        'J': '10110111000',
        'K': '10110001110',
        'L': '10001101110',
        'M': '10111011000',
        'N': '10111000110',
        'O': '10001110110',
        'P': '11101110110',
        'Q': '11010001110',
        'R': '11000101110',
        'S': '11011101000',
        'T': '11011100010',
        'U': '11011101110',
        'V': '11101011000',
        'W': '11101000110',
        'X': '11100010110',
        'Y': '11101101000',
        'Z': '11101100010',
        '[': '11100011010',
        '\\': '11101111010',
        ']': '11001000010',
        '^': '11110001010',
        '_': '10100110000'
    };

    var MapEncodeBPattern = {
        ' ': '11011001100',
        '!': '11001101100',
        '"': '11001100110',
        '#': '10010011000',
        '$': '10010001100',
        'Â %': '10001001100',
        '&': '10011001000',
        '\'': '10011000100',
        '(': '10001100100',
        ')': '11001001000',
        '*': '11001000100',
        '+': '11000100100',
        ',': '10110011100',
        '-': '10011011100',
        '.': '10011001110',
        '/': '10111001100',
        '0': '10011101100',
        '1': '10011100110',
        '2': '11001110010',
        '3': '11001011100',
        '4': '11001001110',
        '5': '11011100100',
        '6': '11001110100',
        '7': '11101101110',
        '8': '11101001100',
        '9': '11100101100',
        ':': '11100100110',
        ';': '11101100100',
        '<': '11100110100',
        '=': '11100110010',
        '>': '11011011000',
        '?': '11011000110',
        '@': '11000110110',
        'A': '10100011000',
        'B': '10001011000',
        'C': '10001000110',
        'D': '10110001000',
        'E': '10001101000',
        'F': '10001100010',
        'G': '11010001000',
        'H': '11000101000',
        'I': '11000100010',
        'J': '10110111000',
        'K': '10110001110',
        'L': '10001101110',
        'M': '10111011000',
        'N': '10111000110',
        'O': '10001110110',
        'P': '11101110110',
        'Q': '11010001110',
        'R': '11000101110',
        'S': '11011101000',
        'T': '11011100010',
        'U': '11011101110',
        'V': '11101011000',
        'W': '11101000110',
        'X': '11100010110',
        'Y': '11101101000',
        'Z': '11101100010',
        '[': '11100011010',
        '\\': '11101111010',
        ']': '11001000010',
        '^': '11110001010',
        '_': '10100110000',
        '`': '10100001100',
        'a': '10010110000',
        'b': '10010000110',
        'c': '10000101100',
        'd': '10000100110',
        'e': '10110010000',
        'f': '10110000100',
        'g': '10011010000',
        'h': '10011000010',
        'i': '10000110100',
        'j': '10000110010',
        'k': '11000010010',
        'l': '11001010000',
        'm': '11110111010',
        'n': '11000010100',
        'o': '10001111010',
        'p': '10100111100',
        'q': '10010111100',
        'r': '10010011110',
        's': '10111100100',
        't': '10011110100',
        'u': '10011110010',
        'v': '11110100100',
        'w': '11110010100',
        'x': '11110010010',
        'y': '11011011110',
        'z': '11011110110',
        '{': '11110110110',
        '|': '10101111000',
        '}': '10100011110',
        '~': '10001011110'
    };

    var MapEncodeCPattern = {
        '00': '11011001100',
        '01': '11001101100',
        '02': '11001100110',
        '03': '10010011000',
        '04': '10010001100',
        '05': '10001001100',
        '06': '10011001000',
        '07': '10011000100',
        '08': '10001100100',
        '09': '11001001000',
        '10': '11001000100',
        '11': '11000100100',
        '12': '10110011100',
        '13': '10011011100',
        '14': '10011001110',
        '15': '10111001100',
        '16': '10011101100',
        '17': '10011100110',
        '18': '11001110010',
        '19': '11001011100',
        '20': '11001001110',
        '21': '11011100100',
        '22': '11001110100',
        '23': '11101101110',
        '24': '11101001100',
        '25': '11100101100',
        '26': '11100100110',
        '27': '11101100100',
        '28': '11100110100',
        '29': '11100110010',
        '30': '11011011000',
        '31': '11011000110',
        '32': '11000110110',
        '33': '10100011000',
        '34': '10001011000',
        '35': '10001000110',
        '36': '10110001000',
        '37': '10001101000',
        '38': '10001100010',
        '39': '11010001000',
        '40': '11000101000',
        '41': '11000100010',
        '42': '10110111000',
        '43': '10110001110',
        '44': '10001101110',
        '45': '10111011000',
        '46': '10111000110',
        '47': '10001110110',
        '48': '11101110110',
        '49': '11010001110',
        '50': '11000101110',
        '51': '11011101000',
        '52': '11011100010',
        '53': '11011101110',
        '54': '11101011000',
        '55': '11101000110',
        '56': '11100010110',
        '57': '11101101000',
        '58': '11101100010',
        '59': '11100011010',
        '60': '11101111010',
        '61': '11001000010',
        '62': '11110001010',
        '63': '10100110000',
        '64': '10100001100',
        '65': '10010110000',
        '66': '10010000110',
        '67': '10000101100',
        '68': '10000100110',
        '69': '10110010000',
        '70': '10110000100',
        '71': '10011010000',
        '72': '10011000010',
        '73': '10000110100',
        '74': '10000110010',
        '75': '11000010010',
        '76': '11001010000',
        '77': '11110111010',
        '78': '11000010100',
        '79': '10001111010',
        '80': '10100111100',
        '81': '10010111100',
        '82': '10010011110',
        '83': '10111100100',
        '84': '10011110100',
        '85': '10011110010',
        '86': '11110100100',
        '87': '11110010100',
        '88': '11110010010',
        '89': '11011011110',
        '90': '11011110110',
        '91': '11110110110',
        '92': '10101111000',
        '93': '10100011110',
        '94': '10001011110',
        '95': '10111101000',
        '96': '10111100010',
        '97': '11110101000',
        '98': '11110100010',
        '99': '10111011110'
    };

    var MapEncodeCodeAValue = {
        ' ': 0,
        '!': 1,
        '"': 2,
        '#': 3,
        '$': 4,
        '%': 5,
        '&': 6,
        '\'': 7,
        '(': 8,
        ')': 9,
        '*': 10,
        '+': 11,
        ',': 12,
        '-': 13,
        '.': 14,
        '/': 15,
        '0': 16,
        '1': 17,
        '2': 18,
        '3': 19,
        '4': 20,
        '5': 21,
        '6': 22,
        '7': 23,
        '8': 24,
        '9': 25,
        ':': 26,
        ';': 27,
        '<': 28,
        '=': 29,
        '>': 30,
        '?': 31,
        '@': 32,
        'A': 33,
        'B': 34,
        'C': 35,
        'D': 36,
        'E': 37,
        'F': 38,
        'G': 39,
        'H': 40,
        'I': 41,
        'J': 42,
        'K': 43,
        'L': 44,
        'M': 45,
        'N': 46,
        'O': 47,
        'P': 48,
        'Q': 49,
        'R': 50,
        'S': 51,
        'T': 52,
        'U': 53,
        'V': 54,
        'W': 55,
        'X': 56,
        'Y': 57,
        'Z': 58,
        '[': 59,
        '\\': 60,
        ']': 61,
        '^': 62,
        '_': 63
    };

    var MapEncodeCodeBValue = {
        'space': 0,
        '!': 1,
        '"': 2,
        '#': 3,
        '$': 4,
        '%': 5,
        '&': 6,
        '\'': 7,
        '(': 8,
        ')': 9,
        '*': 10,
        '+': 11,
        ',': 12,
        '-': 13,
        '.': 14,
        '/': 15,
        '0': 16,
        '1': 17,
        '2': 18,
        '3': 19,
        '4': 20,
        '5': 21,
        '6': 22,
        '7': 23,
        '8': 24,
        '9': 25,
        ':': 26,
        ';': 27,
        '<': 28,
        '=': 29,
        '>': 30,
        '?': 31,
        '@': 32,
        'A': 33,
        'B': 34,
        'C': 35,
        'D': 36,
        'E': 37,
        'F': 38,
        'G': 39,
        'H': 40,
        'I': 41,
        'J': 42,
        'K': 43,
        'L': 44,
        'M': 45,
        'N': 46,
        'O': 47,
        'P': 48,
        'Q': 49,
        'R': 50,
        'S': 51,
        'T': 52,
        'U': 53,
        'V': 54,
        'W': 55,
        'X': 56,
        'Y': 57,
        'Z': 58,
        '[': 59,
        '\\': 60,
        ']': 61,
        '^': 62,
        '_': 63,
        '`': 64,
        'a': 65,
        'b': 66,
        'c': 67,
        'd': 68,
        'e': 69,
        'f': 70,
        'g': 71,
        'h': 72,
        'i': 73,
        'j': 74,
        'k': 75,
        'l': 76,
        'm': 77,
        'n': 78,
        'o': 79,
        'p': 80,
        'q': 81,
        'r': 82,
        's': 83,
        't': 84,
        'u': 85,
        'v': 86,
        'w': 87,
        'x': 88,
        'y': 89,
        'z': 90,
        '{': 91,
        '|': 92,
        '}': 93,
        '~': 94
    };

    var MapEncodeCodeCValue = {
        '00': 0,
        '01': 1,
        '02': 2,
        '03': 3,
        '04': 4,
        '05': 5,
        '06': 6,
        '07': 7,
        '08': 8,
        '09': 9,
        '10': 10,
        '11': 11,
        '12': 12,
        '13': 13,
        '14': 14,
        '15': 15,
        '16': 16,
        '17': 17,
        '18': 18,
        '19': 19,
        '20': 20,
        '21': 21,
        '22': 22,
        '23': 23,
        '24': 24,
        '25': 25,
        '26': 26,
        '27': 27,
        '28': 28,
        '29': 29,
        '30': 30,
        '31': 31,
        '32': 32,
        '33': 33,
        '34': 34,
        '35': 35,
        '36': 36,
        '37': 37,
        '38': 38,
        '39': 39,
        '40': 40,
        '41': 41,
        '42': 42,
        '43': 43,
        '44': 44,
        '45': 45,
        '46': 46,
        '47': 47,
        '48': 48,
        '49': 49,
        '50': 50,
        '51': 51,
        '52': 52,
        '53': 53,
        '54': 54,
        '55': 55,
        '56': 56,
        '57': 57,
        '58': 58,
        '59': 59,
        '60': 60,
        '61': 61,
        '62': 62,
        '63': 63,
        '64': 64,
        '65': 65,
        '66': 66,
        '67': 67,
        '68': 68,
        '69': 69,
        '70': 70,
        '71': 71,
        '72': 72,
        '73': 73,
        '74': 74,
        '75': 75,
        '76': 76,
        '77': 77,
        '78': 78,
        '79': 79,
        '80': 80,
        '81': 81,
        '82': 82,
        '83': 83,
        '84': 84,
        '85': 85,
        '86': 86,
        '87': 87,
        '88': 88,
        '89': 89,
        '90': 90,
        '91': 91,
        '92': 92,
        '93': 93,
        '94': 94,
        '95': 95,
        '96': 96,
        '97': 97,
        '98': 98,
        '99': 99
    };

    var MapEncodeChecksumPattern = {
        0: "11011001100",
        1: "11001101100",
        2: "11001100110",
        3: "10010011000",
        4: "10010001100",
        5: "10001001100",
        6: "10011001000",
        7: "10011000100",
        8: "10001100100",
        9: "11001001000",
        10: "11001000100",
        11: "11000100100",
        12: "10110011100",
        13: "10011011100",
        14: "10011001110",
        15: "10111001100",
        16: "10011101100",
        17: "10011100110",
        18: "11001110010",
        19: "11001011100",
        20: "11001001110",
        21: "11011100100",
        22: "11001110100",
        23: "11101101110",
        24: "11101001100",
        25: "11100101100",
        26: "11100100110",
        27: "11101100100",
        28: "11100110100",
        29: "11100110010",
        30: "11011011000",
        31: "11011000110",
        32: "11000110110",
        33: "10100011000",
        34: "10001011000",
        35: "10001000110",
        36: "10110001000",
        37: "10001101000",
        38: "10001100010",
        39: "11010001000",
        40: "11000101000",
        41: "11000100010",
        42: "10110111000",
        43: "10110001110",
        44: "10001101110",
        45: "10111011000",
        46: "10111000110",
        47: "10001110110",
        48: "11101110110",
        49: "11010001110",
        50: "11000101110",
        51: "11011101000",
        52: "11011100010",
        53: "11011101110",
        54: "11101011000",
        55: "11101000110",
        56: "11100010110",
        57: "11101101000",
        58: "11101100010",
        59: "11100011010",
        60: "11101111010",
        61: "11001000010",
        62: "11110001010",
        63: "10100110000",
        64: "10100001100",
        65: "10010110000",
        66: "10010000110",
        67: "10000101100",
        68: "10000100110",
        69: "10110010000",
        70: "10110000100",
        71: "10011010000",
        72: "10011000010",
        73: "10000110100",
        74: "10000110010",
        75: "11000010010",
        76: "11001010000",
        77: "11110111010",
        78: "11000010100",
        79: "10001111010",
        80: "10100111100",
        81: "10010111100",
        82: "10010011110",
        83: "10111100100",
        84: "10011110100",
        85: "10011110010",
        86: "11110100100",
        87: "11110010100",
        88: "11110010010",
        89: "11011011110",
        90: "11011110110",
        91: "11110110110",
        92: "10101111000",
        93: "10100011110",
        94: "10001011110",
        95: "10111101000",
        96: "10111100010",
        97: "11110101000",
        98: "11110100010",
        99: "10111011110",
        100: "10111101110",
        101: "11101011110",
        102: "11110101110",
        103: "11010000100",
        104: "11010010000",
        105: "11010011100",
        106: "1100011101011"
    };

    var isNum = function (c) {
        var cc = c.charCodeAt(0);
        return cc >= 48 && cc <= 57;
    };

    var isAllNum = function (str) {
        var i = 0, len = str.length;

        for (; i < len; i++) {
            if (!isNum(str[i])) {
                return false
            }
        }

        return true
    };

    var toCodeC = function (stuff) {
        var ret = {p: '', v: []}, i = 0, len = stuff.length, ss = '';

        for (; i < len; i += 2) {
            ss = stuff.substr(i, 2);
            ret.p += MapEncodeCPattern[ss];
            ret.v.push(MapEncodeCodeCValue[ss]);
        }

        return ret;
    };

    var even = function (i) {
        if (i % 2 === 0) {
            return i;
        }

        return i - 1;
    };

    var locate = function (stuff) {
        var ret = {
            codeType: '',
            code: '',
            startCode: '',
            startCodeValue: -1,
            codeTypeValue: -1,
            val: -1
        };

        if (MapEncodeBPattern.hasOwnProperty(stuff) && MapEncodeCodeBValue.hasOwnProperty(stuff)) {
            ret.codeType = CodeB;
            ret.code = MapEncodeBPattern[stuff];
            ret.startCode = StartCodeB;
            ret.startCodeValue = StartCodeBValue;
            ret.codeTypeValue = CodeBValue;
            ret.val = MapEncodeCodeBValue[stuff];

            return ret;
        }

        if (MapEncodeAPattern.hasOwnProperty(stuff) && MapEncodeCodeAValue.hasOwnProperty(stuff)) {
            ret.codeType = CodeA;
            ret.code = MapEncodeAPattern[stuff];
            ret.startCode = StartCodeA;
            ret.startCodeValue = StartCodeAValue;
            ret.codeTypeValue = CodeAValue;
            ret.val = MapEncodeCodeAValue[stuff];

            return ret;
        }

        return ret;
    };

    window['barcode128'] = function (stuff) {
        var ws = [],
            len = stuff.length,
            i = 0,
            ss = '',
            ssc = '',
            cct = '',
            ret = '',
            scv = '',
            pss = '',
            pssl = '',
            tc = '',
            el = 0,
            ns = '',
            lr = {},
            checksum = 0;

        while (i < len) {
            ss = stuff[i];
            ssc = ss.charCodeAt(0);

            if (ssc < 32 || ssc > 127) {
                throw new Error('unsupported character: ' + ss);
            }

            if (isNum(ss)) {
                if (i == 0 && len == 2) {
                    if (isNum(stuff[1])) {
                        ret += StartCodeC;
                        scv = StartCodeCValue;

                        ret += MapEncodeCPattern[stuff];
                        ws.push(MapEncodeCodeCValue[stuff]);

                        break
                    }
                } else if (cct !== CodeC) {
                    pss = stuff.substr(i, 6);
                    pssl = pss.length;

                    if (pssl >= 4 && i == 0) {
                        ret += StartCodeC;
                        scv = StartCodeCValue;
                        cct = CodeC;
                    } else if ((pssl >= 4 && pssl + i == len || pssl == 6) && isAllNum(pss)) {
                        ret += CodeC;
                        cct = CodeC;
                        ws.push(CodeCValue);
                    }

                    if (cct == CodeC) {
                        el = even(pssl);

                        if (el === pssl) {
                            tc = toCodeC(pss);
                        } else {
                            tc = toCodeC(pss.substr(0, el));
                        }

                        ret += tc.p;
                        ws = ws.concat(tc.v);

                        i += el;
                        continue;
                    }
                } else if (cct === CodeC) {
                    if ((ns = stuff[i + 1]) && isNum(ns)) {
                        ret += MapEncodeCPattern[ss + ns];
                        ws.push(MapEncodeCodeCValue[ss + ns]);
                        i += 2;
                        continue;
                    }
                }
            }

            lr = locate(ss);
            if (lr.val == -1) {
                throw new Error('unsupported string: ' + ss);
            }

            if (lr.codeType !== cct) {
                if (i == 0) {
                    ret += lr.startCode;
                    scv = lr.startCodeValue;
                } else {
                    ret += lr.codeType;
                    ws.push(lr.codeTypeValue);
                }

                cct = lr.codeType;
            }

            ret += lr.code;
            ws.push(lr.val);
            i++;
        }

        checksum += scv;
        for (i = 0, len = ws.length; i < len; i++) {
            checksum += ws[i] * (i + 1);
        }

        checksum = checksum % 103;
        ret += MapEncodeChecksumPattern[checksum] + Stop;

        return {
            data: ret,
            stuff: stuff,
            /**
             *
             * @param {HTMLElement} c
             * @param {int} [h=100] - Height, default is 100 pixels
             * @param {int} [qx=5] - Quite x, default is 5*u pixels
             * @param {int} [qy=3] - Quite y, default is 3*u pixels
             * @param {int} [u=1] - Units of bar width, default is 2 pixels
             * @param {boolean} [st=true] - Flag of show text, default is show
             * @param {int} [fs=10] - Font size, default is 10 pixels
             */
            renderTo: function (c, h, qx, qy, u, st, fs) {
                if (!c.getContext) {
                    throw new Error('missing canvas api');
                }

                var d = this.data, ctx = c.getContext('2d'), width = 0, height = 0, i = 0, len = d.length;

                h = h || 100;
                u = u || 2;
                qx = qx || 5 * u;
                qy = qy || 3 * u;

                st = typeof st === 'undefined' ? true : !!st;
                fs = fs || 10;

                width = qx * 2 + d.length * u;
                height = qy * 2 + h + (st ? fs + 3 : 0); // give the text 3 top-padding

                ctx.canvas.width = width;
                ctx.canvas.height = height;

                ctx.clearRect(0, 0, width, height);

                for (; i < len; i++) {
                    if (d[i] === '1') {
                        ctx.fillRect(qx + i * u, qy, u, h);
                    }
                }

                if (st) {
                    ctx.font = "12px Arial";
                    ctx.textAlign = "center";
                    ctx.fillText(this.stuff, width * 0.5, height - qy);
                }
            }
        };
    };
})();